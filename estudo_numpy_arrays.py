# -*- coding: utf-8 -*-
"""1. CRIAÇÃO DE ARRAYS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DPh0GCzLyXUb5gqBHvClO2u_hvx345Uh
"""

import numpy as np

"""# **CRIANDO ARRAYS UNIDIMENSIONAIS**

**sintaxe**: vetor = numpy.array([valor1, valor2, valorn])

Um par de colchetes somente representa uma única linha, onde as colunas e seus elementos são separados por vírgulas.
"""

vetor = np.array([1, 1, 1])
print(f'Vetor criado: {vetor}')
type(vetor) #verificar o tipo do objeto

"""# **CRIANDO ARRAYS BIDIMENSIONAIS (LINHA E COLUNA)**

**sintaxe**: vetor = numpy.array([  ],[  ])

Cada par de colchetes                              internos representa uma linha, onde seus elementos de coluna são separados por vírgula

"""

matriz = np.array([[1, 2, 3], [4, 5, 6]])
print(f'Matriz criada 2x3:\n {matriz}')
type(matriz)

"""# **CRIANDO ARRAYS COM TODOS OS ELEMENTOS 0**

**Sintaxe**:

array = numpy.zeros([linhas, colunas]) #com colchetes

ou

array = numpy.zeros((linhas, colunas)) #com parênteses



Deve-se passar a dimensão do array.
Uma dimensão será um vetor.
Duas dimensões será uma matriz.
"""

vetor = np.zeros(5, dtype=int)
print(f'Vetor criado: {vetor}')

print()

matriz = np.zeros([2, 3], dtype=int)
print(f'Matriz criada 2x3:\n {matriz}')

"""# **CRIANDO ARRAYS COM TODOS OS ELEMENTOS 1**

Sintaxe: array = numpy.ones([linhas, colunas])

Deve-se passar a dimensão do array.
Uma dimensão será um vetor.
Duas dimensões será uma matriz.
"""

vetor = np.ones(3, dtype=int)
print(f'Vetor criado: {vetor}')

print()

matriz = np.ones((3, 3))
print(f'Matriz criada 3x3:\n {matriz}')

"""# **CRIANDO MATRIZ IDENTIDADE**

Sintaxe: array = numpy.eyes(dimensão)

Deve-se passar a dimensão da matriz, que por ser identidade é sempre uma matriz quadrada.
"""

matrizI= np.eye(3)
print(f'Matriz identidade 3x3:\n {matrizI}')

"""# **CRIANDO MATRIZ COM DIAGONAL PRINCIPAL FORMADA POR UM ÚNICO VALOR E OS OUTROS ELEMENTOS IGUAL A ZERO**

**Sintaxe**: matriz = numpy.diag([valor])

**Nota**: a quantidade de valores da diagonal principal dará a dimensão da matriz (sempre quadrada)


"""

matrizD = np.diag([10, 10, 10])
print(f'Matriz diagonal 3x3:\n {matrizD}')

"""# **USANDO ARANGE PARA CRIAR VETORES**

**Sintaxe**: array = numpy.arange(inicio, fim, passo)

**Nota**: o valor indicado no fim nunca entra no arranjo.
"""

vetor0 = np.arange(10)
print(f'Vetor criado com passo 1: {vetor0}')

vetor1 = np.arange(1, 10)
print(f'Vetor criado com passo 1: {vetor1}')

vetor2 = np.arange(1, 10, 2)
print(f'Vetor criado com passo 2: {vetor2}')

"""# **CRIANDO ARRAYS UNIDIMENSIONAIS COM LINSPACE**

**Sintaxe**: array = numpy.linspace(inicio, fim, quantidade de elementos)

**Nota**: o passo é criado automaticamente para gerar a quantidade necessária.
"""

vetor3 = np.linspace(1, 10, 10)
print(f'Vetor criado com 10 elementos: {vetor3}')

vetor4 = np.linspace(1, 10, 20)
print(f'Vetor criado com 20 elementos: {vetor4}')

"""# **USANDO VSTACK E HSTACK PARA CRIAR ARRAYS**

**VSTACK**


**Sintaxe**: array = numpy.vstack((array1, array2))

Adiciona elementos de um ou mais array na vertical. Os arrays tem q ter o mesmo número de colunas.

**HSTACK**

**Sintaxe**: array = numpy.hstack((array1, array2))

Adiciona elementos de um ou mais array na horizontal. Os arrays tem q ter o mesmo número de linhas.
"""

#usando vstack - um embaixo do outro (cria-se outro vetor)
#junta-se os vetores na vertical
vetor1 = np.array([1, 2, 3]) # 1X3
vetor2 = np.array([4, 5, 6]) # 1x3
vetor3 = np.vstack((vetor1, vetor2))
print(f'Vetor criado com vstack:\n {vetor3}')

#usando hstack - - um ao lado do outro (cria-se outro vetor)
#junta-se os vetores na horizontal
vetor4 = np.hstack((vetor1, vetor2))
print(f'Vetor criado com hstack:\n {vetor4}')

"""# **LENDO DADOS PELO TECLADO PARA UM VETOR**"""

vetor = np.arange(5, dtype=int)*0 # ou vetor = np.zeros(5)
print(f'Vetor inicial criado: {vetor}')

#lendo dados para o vetor
for i in range(0, len(vetor)):
  vetor[i] = int(input(f'Digite o valor da posição {i+1}: '))

print(f'Vetor final criado: {vetor}')

"""# **LENDO DADOS PELO TECLADO PARA UMA MATRIZ**"""

matriz = np.zeros((2, 2,))
print(f'Matriz inicial criada: {matriz}')
for i in range(0, len(matriz)): #caminhando por linhas
  for j in range(0, len(matriz[i])): #caminhando por colunas
    matriz[i][j] = int(input(f'Digite o valor da posição [{i+1}][{j+1}]: '))